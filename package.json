{
  "name": "svn-scm",
  "displayName": "SVN",
  "description": "Integrated Subversion source control",
  "version": "1.29.6",
  "publisher": "johnstoncode",
  "engines": {
    "vscode": "^1.19.0"
  },
  "enableProposedApi": false,
  "icon": "images/subversion.png",
  "homepage": "https://github.com/JohnstonCode/svn-scm/blob/master/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/JohnstonCode/svn-scm.git"
  },
  "bugs": {
    "url": "https://github.com/JohnstonCode/svn-scm/issues"
  },
  "categories": ["Other", "SCM Providers"],
  "keywords": ["multi-root ready", "scm", "svn"],
  "activationEvents": ["*"],
  "main": "./out/extension",
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test",
    "prettier": "prettier --no-config --list-different 'src/**/*.ts'",
    "tools:genReadme": "node ./out/tools/generateConfigSectionForReadme.js",
    "precommit": "pretty-quick --staged"
  },
  "dependencies": {
    "iconv-lite": "^0.4.23",
    "is-utf8": "^0.2.1",
    "jschardet": "^1.6.0",
    "minimatch": "^3.0.4",
    "xml2js": "^0.4.19"
  },
  "devDependencies": {
    "@types/glob": "^5.0.33",
    "@types/mocha": "^5.2.0",
    "@types/node": "^10.0.3",
    "@types/xml2js": "^0.4.2",
    "decache": "^4.3.0",
    "eslint": "^5.0.0",
    "glob": "^7.1.2",
    "husky": "^0.14.3",
    "istanbul": "^0.4.5",
    "mocha": "^5.1.1",
    "prettier": "^1.12.1",
    "pretty-quick": "^1.4.1",
    "remap-istanbul": "^0.11.1",
    "typescript": "^2.8.3",
    "vscode": "^1.1.17"
  },
  "contributes": {
    "commands": [
      {
        "command": "svn.add",
        "title": "Add",
        "category": "SVN",
        "icon": {
          "light": "icons/light/add.svg",
          "dark": "icons/dark/add.svg"
        }
      },
      {
        "command": "svn.changelist",
        "title": "Set changelist",
        "category": "SVN",
        "icon": {
          "light": "icons/light/changelist.svg",
          "dark": "icons/dark/changelist.svg"
        }
      },
      {
        "command": "svn.commit",
        "title": "Commit Selected",
        "category": "SVN",
        "icon": {
          "light": "icons/light/check.svg",
          "dark": "icons/dark/check.svg"
        }
      },
      {
        "command": "svn.commitWithMessage",
        "title": "Commit Changes",
        "category": "SVN",
        "icon": {
          "light": "icons/light/check.svg",
          "dark": "icons/dark/check.svg"
        }
      },
      {
        "command": "svn.openChangeBase",
        "title": "Open Changes with BASE",
        "category": "SVN",
        "icon": {
          "light": "icons/light/open-change-base.svg",
          "dark": "icons/dark/open-change-base.svg"
        }
      },
      {
        "command": "svn.openChangeHead",
        "title": "Open Changes with HEAD",
        "category": "SVN",
        "icon": {
          "light": "icons/light/open-change-head.svg",
          "dark": "icons/dark/open-change-head.svg"
        }
      },
      {
        "command": "svn.openFile",
        "title": "Open File",
        "category": "SVN",
        "icon": {
          "light": "icons/light/open-file.svg",
          "dark": "icons/dark/open-file.svg"
        }
      },
      {
        "command": "svn.openHEADFile",
        "title": "Open File (HEAD)",
        "category": "SVN"
      },
      {
        "command": "svn.refresh",
        "title": "Refresh",
        "category": "SVN",
        "icon": {
          "light": "icons/light/refresh.svg",
          "dark": "icons/dark/refresh.svg"
        }
      },
      {
        "command": "svn.switchBranch",
        "title": "Switch Branch",
        "category": "SVN"
      },
      {
        "command": "svn.revert",
        "title": "Revert Selected File",
        "category": "SVN"
      },
      {
        "command": "svn.update",
        "title": "Update",
        "category": "SVN"
      },
      {
        "command": "svn.patch",
        "title": "Show diff patch for selected",
        "category": "SVN"
      },
      {
        "command": "svn.patchAll",
        "title": "Show all diff patch",
        "category": "SVN"
      },
      {
        "command": "svn.remove",
        "title": "Remove Selected",
        "category": "SVN"
      },
      {
        "command": "svn.resolve",
        "title": "Resolve conflicts for selected",
        "category": "SVN",
        "icon": {
          "light": "icons/light/check.svg",
          "dark": "icons/dark/check.svg"
        }
      },
      {
        "command": "svn.resolveAll",
        "title": "Resolve all conflicts",
        "category": "SVN"
      },
      {
        "command": "svn.log",
        "title": "Show commit messages",
        "category": "SVN"
      },
      {
        "command": "svn.revertChange",
        "title": "Revert Change",
        "category": "SVN",
        "icon": {
          "light": "icons/light/clean.svg",
          "dark": "icons/dark/clean.svg"
        }
      },
      {
        "command": "svn.revertSelectedRanges",
        "title": "Revert Selected Ranges",
        "category": "SVN"
      },
      {
        "command": "svn.close",
        "title": "Close repository",
        "category": "SVN"
      },
      {
        "command": "svn.cleanup",
        "title": "Clean up working copy",
        "category": "SVN"
      },
      {
        "command": "svn.patchChangeList",
        "title": "Show patch from changelist",
        "category": "SVN"
      },
      {
        "command": "svn.addToIgnoreSCM",
        "title": "Ignore file/ext from SVN (svn:ignore)",
        "category": "SVN"
      },
      {
        "command": "svn.addToIgnoreExplorer",
        "title": "Ignore file/ext from SVN (svn:ignore)",
        "category": "SVN"
      },
      {
        "command": "svn.renameExplorer",
        "title": "Rename with SVN",
        "category": "SVN"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "svn.add",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.changelist",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.commit",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.commitWithMessage",
          "when": "false"
        },
        {
          "command": "svn.openChangeBase",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && svnActiveEditorHasChanges"
        },
        {
          "command": "svn.openChangeHead",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && svnActiveEditorHasChanges"
        },
        {
          "command": "svn.openFile",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.openHEADFile",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.refresh",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.switchBranch",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.revert",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.update",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.patch",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.patchAll",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.remove",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.resolve",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.resolveAll",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.log",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.revertChange",
          "when": "false"
        },
        {
          "command": "svn.revertSelectedRanges",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && svnHasSupportToRegisterDiffCommand == 1"
        },
        {
          "command": "svn.close",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.cleanup",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.addToIgnoreExplorer",
          "when": "false"
        },
        {
          "command": "svn.renameExplorer",
          "when": "false"
        }
      ],
      "scm/title": [
        {
          "command": "svn.commitWithMessage",
          "group": "navigation",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.refresh",
          "group": "navigation",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.switchBranch",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.update",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.patchAll",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.resolveAll",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.log",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.cleanup",
          "when": "config.svn.enabled && scmProvider == svn"
        },
        {
          "command": "svn.patchChangeList",
          "when": "config.svn.enabled && scmProvider == svn"
        }
      ],
      "scm/sourceControl": [
        {
          "command": "svn.close",
          "group": "navigation",
          "when": "scmProvider == svn"
        }
      ],
      "scm/resourceGroup/context": [],
      "scm/resourceState/context": [
        {
          "command": "svn.add",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup == unversioned",
          "group": "inline"
        },
        {
          "command": "svn.add",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup == unversioned",
          "group": "1_modification"
        },
        {
          "command": "svn.openFile",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != external",
          "group": "navigation"
        },
        {
          "command": "svn.openHEADFile",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external",
          "group": "navigation"
        },
        {
          "command": "svn.openChangeBase",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external",
          "group": "navigation"
        },
        {
          "command": "svn.openChangeHead",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external",
          "group": "navigation"
        },
        {
          "command": "svn.patch",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "navigation"
        },
        {
          "command": "svn.resolve",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup == conflicts",
          "group": "inline"
        },
        {
          "command": "svn.resolve",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup == conflicts",
          "group": "1_modification"
        },
        {
          "command": "svn.changelist",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "inline"
        },
        {
          "command": "svn.changelist",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "1_modification"
        },
        {
          "command": "svn.commit",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "1_modification"
        },
        {
          "command": "svn.revert",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "2_modification"
        },
        {
          "command": "svn.remove",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup != unversioned && scmResourceGroup != external && scmResourceGroup != conflicts",
          "group": "2_modification"
        },
        {
          "command": "svn.addToIgnoreSCM",
          "when":
            "config.svn.enabled && scmProvider == svn && scmResourceGroup == unversioned",
          "group": "1_modification"
        }
      ],
      "scm/change/title": [
        {
          "command": "svn.revertChange",
          "when": "config.svn.enabled && originalResourceScheme == svn"
        }
      ],
      "editor/title": [
        {
          "command": "svn.openFile",
          "group": "navigation",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme != extension && resourceScheme != merge-conflicts.conflicts-diff"
        },
        {
          "command": "svn.openChangeBase",
          "group": "navigation",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && svnActiveEditorHasChanges && !isInDiffEditor && resourceScheme == file"
        },
        {
          "command": "svn.openChangeHead",
          "group": "navigation",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && svnActiveEditorHasChanges && !isInDiffEditor && resourceScheme == file"
        },
        {
          "command": "svn.revertSelectedRanges",
          "group": "2_svn@3",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme != merge-conflicts.conflicts-diff && && svnHasSupportToRegisterDiffCommand == 1"
        }
      ],
      "explorer/context": [
        {
          "command": "svn.addToIgnoreExplorer",
          "group": "9_svn",
          "when": "config.svn.enabled && svnOpenRepositoryCount != 0"
        },
        {
          "command": "svn.renameExplorer",
          "group": "7_modification",
          "when":
            "config.svn.enabled && svnOpenRepositoryCount != 0 && explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
        }
      ]
    },
    "configuration": {
      "title": "Svn",
      "properties": {
        "svn.enabled": {
          "type": "boolean",
          "description": "Whether svn is enabled",
          "default": true
        },
        "svn.autorefresh": {
          "type": "boolean",
          "description": "Whether auto refreshing is enabled",
          "default": true
        },
        "svn.decorations.enabled": {
          "type": "boolean",
          "description":
            "Controls if SVN contributes colors and badges to the explorer and the open (VSCode >= 1.18 with proposed-api)",
          "default": true
        },
        "svn.path": {
          "type": ["string", "null"],
          "description": "Path to the svn executable",
          "default": null,
          "isExecutable": true
        },
        "svn.ignoreMissingSvnWarning": {
          "type": "boolean",
          "description": "Ignores the warning when SVN is missing",
          "default": false
        },
        "svn.diff.withHead": {
          "type": "boolean",
          "description":
            "Show diff changes using latest revision in the repository. Set false to use latest revision in local folder",
          "default": true
        },
        "svn.layout.trunkRegex": {
          "type": ["string", "null"],
          "description":
            "Regex to detect path for 'trunk' in SVN URL, 'null' to disable. (Ex.: '(trunk)', '(main)')",
          "default": "(trunk)(/.*)?"
        },
        "svn.layout.trunkRegexName": {
          "type": ["number"],
          "description": "Regex group position for name of trunk",
          "default": 1
        },
        "svn.layout.branchesRegex": {
          "type": ["string", "null"],
          "description":
            "Regex to detect path for 'branches' in SVN URL, 'null' to disable. Subpath use 'branches/[^/]+/([^/]+)(/.*)?' (Ex.: 'branches/...', 'versions/...')",
          "default": "branches/([^/]+)(/.*)?"
        },
        "svn.layout.branchesRegexName": {
          "type": ["number"],
          "description": "Regex group position for name of branch",
          "default": 1
        },
        "svn.layout.tagsRegex": {
          "type": ["string", "null"],
          "description":
            "Regex to detect path for 'tags' in SVN URL, 'null' to disable. Subpath use 'tags/[^/]+/([^/]+)(/.*)?'. (Ex.: 'tags/...', 'stamps/...')",
          "default": "tags/([^/]+)(/.*)?"
        },
        "svn.layout.tagRegexName": {
          "type": ["number"],
          "description": "Regex group position for name of tag",
          "default": 1
        },
        "svn.layout.showFullName": {
          "type": ["boolean"],
          "description":
            "Set true to show 'branches/<name>' and false to show only '<name>'",
          "default": true
        },
        "svn.multipleFolders.enabled": {
          "type": "boolean",
          "description": "Allow to find subfolders using SVN",
          "default": false
        },
        "svn.multipleFolders.depth": {
          "type": "number",
          "minimum": 0,
          "description": "Maximum depth to find subfolders using SVN",
          "default": 4
        },
        "svn.multipleFolders.ignore": {
          "type": "array",
          "description": "Folders to ignore using SVN",
          "default": ["**/.git", "**/.hg", "**/vendor", "**/node_modules"]
        },
        "svn.sourceControl.ignoreOnCommit": {
          "type": "array",
          "description": "Changelists to ignore on commit",
          "default": ["ignore-on-commit"]
        },
        "svn.detectExternals": {
          "type": "boolean",
          "default": true,
          "description":
            "Controls whether to automatically detect svn externals."
        },
        "svn.sourceControl.combineExternalIfSameServer": {
          "type": "boolean",
          "default": false,
          "description":
            "Combine the svn external in the main if is from the same server."
        },
        "svn.sourceControl.countUnversioned": {
          "type": "boolean",
          "description": "Allow to count unversioned files in status count",
          "default": true
        },
        "svn.sourceControl.countIgnoreOnCommit": {
          "type": "boolean",
          "description":
            "Allow to count ignored files to commit in status count",
          "default": false
        },
        "svn.log.length": {
          "type": "number",
          "minimum": 1,
          "description": "Number of commit messages to log",
          "default": 50
        },
        "svn.showOutput": {
          "type": "boolean",
          "description": "Show the output window when the extension starts",
          "default": false
        },
        "svn.conflicts.autoResolve": {
          "type": "boolean",
          "description": "Set file to status resolved after fix conflictss",
          "default": false
        },
        "svn.update.ignoreExternals": {
          "type": "boolean",
          "description":
            "Set to ignore externals definitions on update (add --ignore-externals)",
          "default": true
        },
        "svn.default.encoding": {
          "type": ["string", "null"],
          "description":
            "Encoding of svn output if the output is not utf-8. When this parameter is null, the encoding is automatically detected. Example: 'windows-1252'.",
          "default": null
        },
        "svn.showUpdateMessage": {
          "type": "boolean",
          "description": "Show the update message when update is run",
          "default": true
        },
        "svn.newCommits.checkFrequency": {
          "type": "number",
          "description":
            "Set the interval in seconds to check new commits on remote repository and show in statusbar. 0 to disable",
          "default": 300
        }
      }
    }
  }
}
